from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.select import Select
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
import time
from bs4 import BeautifulSoup
from datetime import datetime
import schedule
import oracledb
import logging
from decimal import Decimal

class WalletService:
    def __init__(self, connection):
        self.connection = connection
    # 환전 진행
    def do_exchange(self, wallet_seq, currency_code, password, krw_amount, foreign_amount, source_currency_name):
        try:
            from_wallet = self.get_wallet_by_seq(wallet_seq)
            account = self.get_account_by_ac_no(from_wallet[2])
            target_wallet = self.get_wallet_by_user_and_currency(from_wallet[1], currency_code)

            self.process_krw_deduction(from_wallet, account, krw_amount)
            self.process_foreign_addition(from_wallet, target_wallet, currency_code, foreign_amount, source_currency_name)

            # 모든 작업이 성공적으로 완료되면 트랜잭션을 커밋
            #print("환전완료 커밋 전")
            self.connection.commit()
            #print("환전완료 커밋 완료")
        except Exception as e:
            # 오류가 발생하면 변경 사항을 롤백
            self.connection.rollback()
            raise e
    # wallet에 외화 충전
    def process_foreign_addition(self, from_wallet, target_wallet, currency_code, foreign_amount, source_currency_name):
        cursor = self.connection.cursor()
        # 해당 외화가 wallet에 없을 시
        if target_wallet is None:
            self.add_wallet_new_cur(from_wallet, currency_code, source_currency_name, foreign_amount)
            #print("새로운 통화 월렛 추가 및  충전", target_wallet)
        # 해당 외화가 wallet에 있을 시
        else:
            cursor.execute("UPDATE HANA_WALLET SET BALANCE=BALANCE+:1 WHERE USER_SEQ=:2 AND CURRENCY_CODE=:3",
                                (foreign_amount, from_wallet[1], currency_code))
            #print("기존 통화 월렛에 충전", target_wallet)
        # 환전 입금 내역 transaction
        deposit_dto = self.create_deposit_dto(target_wallet if target_wallet else from_wallet, currency_code, foreign_amount, source_currency_name)
        cursor.execute("INSERT INTO HANA_WALLET_HIST (WALLET_TRANS_NO, WALLET_SEQ, BALANCE, TRANSACTION_AMOUNT, TRANSACTION_TYPE, DEPOSIT_CUR, DEPOSIT_NAME) VALUES (HANA_WALLET_SEQ.NEXTVAL, :1, :2, :3, 'E', :4, :5)",
                            deposit_dto)
        #print("환전 입금 내역 추가:", deposit_dto)

    # 환전 입금 내역 추가
    def create_deposit_dto(self, target_wallet, currency_code, foreign_amount, source_currency_name):
        return (
            target_wallet[0],
            Decimal(target_wallet[4]) + Decimal(foreign_amount),  # Assuming Balance is at index 4
            foreign_amount,
            currency_code,
            source_currency_name
        )
    # 원화 차감
    def process_krw_deduction(self, from_wallet, account, krw_amount):
        cursor = self.connection.cursor()
        if Decimal(from_wallet[4]) < Decimal(krw_amount):  # from_wallet[4] = balance
            shortage = Decimal(krw_amount) - Decimal(from_wallet[4])
            self.deduct_from_account(account, int(shortage))
            #print("부족한 금액 계좌에서 차감", account)
            cursor.execute("UPDATE HANA_WALLET SET BALANCE=BALANCE+:1 WHERE USER_SEQ=:2 AND CURRENCY_CODE='KRW'",
                            (shortage, from_wallet[1]))
            #print("부족금액 월렛에 충전", from_wallet)
        cursor.execute("UPDATE HANA_WALLET SET BALANCE=BALANCE-:1 WHERE USER_SEQ=:2 AND CURRENCY_CODE='KRW'",
                            (krw_amount, from_wallet[1]))
        #print("월렛에서 금액 차감", from_wallet)
        withdraw_dto = self.create_withdraw_dto(from_wallet, krw_amount)
        cursor.execute("INSERT INTO HANA_WALLET_HIST (WALLET_TRANS_NO, WALLET_SEQ, BALANCE, TRANSACTION_AMOUNT, TRANSACTION_TYPE, WITHDRAW_CUR, WITHDRAW_NAME) VALUES (HANA_WALLET_SEQ.NEXTVAL, :1, :2, :3, 'E', 'KRW', 'won')",
                            withdraw_dto)
        #print("환전 출금 내역 추가:", withdraw_dto)

    def create_withdraw_dto(self, from_wallet, krw_amount):
        return (
            from_wallet[0],
            Decimal(from_wallet[4]) - Decimal(krw_amount),
            krw_amount
        )

    def deduct_from_account(self, account, amount):
        cursor = self.connection.cursor()
        # 계좌의 현재 잔액
        ac_no = account[0]
        cursor.execute("SELECT BALANCE FROM CHECKING_ACCOUNT WHERE AC_NO=:1", (ac_no,))
        # account_balance = self.cursor.fetchone()[0]
        account_balance = account[4]

        # 출금하려는 금액이 현재 잔액보다 많으면 예외를 발생.
        if account_balance < amount:
            raise ValueError("계좌 잔액이 부족합니다.")

        # 충분한 잔액이 있으면, 해당 금액을 계좌에서 차감.
        cursor.execute("UPDATE CHECKING_ACCOUNT SET BALANCE = BALANCE - :1 WHERE AC_NO=:2", (amount, ac_no))

        #print(f"{amount} 금액이 계좌 {ac_no}에서 차감되었습니다.")
        self.connection.commit()

    def add_wallet_new_cur(self, wallet, currency_code, source_currency_name, foreign_amount):
        cursor = self.connection.cursor()
        new_wallet_currency_dto = (
            wallet[1],  # USER_SEQ
            wallet[2],  # AC_NO
            wallet[3],  # WALLET_PW
            foreign_amount,
            currency_code,
            source_currency_name
        )
        cursor.execute("INSERT INTO HANA_WALLET (WALLET_SEQ, USER_SEQ, AC_NO, WALLET_PW, BALANCE, CURRENCY_CODE, CURRENCY, PRIME_RATE) VALUES (HANA_WALLET_SEQ.NEXTVAL, :1, :2, :3, :4, :5, :6, 100)", new_wallet_currency_dto)
        #print("월렛 외화 추가:", new_wallet_currency_dto)
        cursor.close()

    # wallet번호로 wallet 조회
    def get_wallet_by_seq(self, wallet_seq):
        cursor = self.connection.cursor()
        sql = "SELECT * FROM HANA_WALLET WHERE Wallet_Seq=:1"
        cursor.execute(sql, (wallet_seq,))
        result = cursor.fetchone()
        cursor.close()
        return result
    # 계좌번호로 계좌 조회
    def get_account_by_ac_no(self, ac_no):
        cursor = self.connection.cursor()
        cursor.execute("SELECT * FROM CHECKING_ACCOUNT WHERE AC_NO=:1", (ac_no,))
        result = cursor.fetchone()
        cursor.close()
        return result
    # 유저번호와 통화코드로 WALLET 조회
    def get_wallet_by_user_and_currency(self, user_seq, currency_code):
        cursor = self.connection.cursor()
        cursor.execute("SELECT * FROM HANA_WALLET WHERE USER_SEQ=:1 AND CURRENCY_CODE=:2", (user_seq, currency_code))
        result = cursor.fetchone()
        cursor.close()
        return result


class AutoExchange:
    def __init__(self, connection):
        self.connection = connection

    def connect_to_oracle(self):
        logging.info("Connecting to Oracle database...")
        # oracledb.init_oracle_client(lib_dir=r"C:\Users\kopo\exchange\instantclient_19_20")
        oracledb.init_oracle_client(lib_dir=r"C:/home/ubuntu/instantclient_19_20")
        self.connection = oracledb.connect(user='ADMIN', password='@Pasdf658215', dsn='junha_high')
        logging.info("Connected to Oracle database")

    def close_oracle_connection(self):
        if self.connection is not None:
            self.connection.close()

    def perform_exchange(self, amount, rate):
        exchanged_amount = amount * rate
        total_with_fee = exchanged_amount * 1.01  # 1%의 수수료를 더합니다.
        return round(total_with_fee)  # 반올림하여 정수로 변환


    def _get_latest_exchange_rates(self):
        cursor = self.connection.cursor()
        sql = "SELECT CURRENCY_CODE, BASE_RATE FROM EXCHANGE_RATE"
        cursor.execute(sql)
        result = cursor.fetchall()
        rates = {row[0]: row[1] for row in result}
        cursor.close()
        return rates

    def get_waiting_auto_exchanges(self):
        cursor = self.connection.cursor()
        sql = "SELECT * FROM AUTO_EXCHANGE WHERE status = 'W'"
        result = cursor.execute(sql).fetchall()
        cursor.close()
        return result

    def get_wallet_by_auto_exchange_seq(self, ae_seq):
        cursor = self.connection.cursor()
        sql = """
        SELECT W.*
        FROM HANA_WALLET W
        JOIN AUTO_EXCHANGE AE ON W.WALLET_SEQ = AE.WALLET_SEQ
        WHERE AE.AE_SEQ = :1
        """
        cursor.execute(sql, (ae_seq,))
        result = cursor.fetchone()
        cursor.close()
        return result

    # 유저번호와 통화코드로 WALLET 조회
    def get_wallet_by_user_and_currency(self, user_seq):
        cursor = self.connection.cursor()
        sql = """
        SELECT *
        FROM HANA_WALLET
        WHERE USER_SEQ = :1 AND CURRENCY_CODE = :2
        """
        cursor.execute(sql, (user_seq, "KRW"))
        result = cursor.fetchone()
        cursor.close()
        return result


    def check_and_exchange(self):
        exchange_rates = self._get_latest_exchange_rates()
        pending_requests = self.get_waiting_auto_exchanges()

        wallet_service = WalletService(self.connection)
        print("자동환전 시작")
        for request in pending_requests:
            ae_seq = request[0]
            wallet_seq = request[1]
            base_cur_code = request[2]
            target_cur_code = request[3]
            exchange_amount = request[4]
            exchange_date = request[5]
            lower_bound = request[6]
            status = request[7]

            wallet_info = self.get_wallet_by_auto_exchange_seq(ae_seq)
            krw_wallet_info = self.get_wallet_by_user_and_currency(wallet_info[1])
            #print("월렛정보는 ", wallet_info)
            #print("원화 월렛정보는 ", krw_wallet_info)
            # 날짜가 만료되면 status 'F'로 변환
            if exchange_date.date() <= datetime.today().date():
                self.update_status(ae_seq, 'F')
                continue

            target_rate = lower_bound
            #print("환율정보 총: ", exchange_rates)
            #print("환율은 ", exchange_rates[target_cur_code])
            if target_cur_code in exchange_rates and exchange_rates[target_cur_code]:
                #print(target_cur_code)
                exchanged_amount = self.perform_exchange(exchange_amount, exchange_rates[target_cur_code])
                #print("환전할 금액은 ", exchanged_amount)
                #print("출금할월렛의번호", krw_wallet_info[0], "환전할외화코드", target_cur_code, "월렛비밀번호", wallet_info[3], "결제할원화금액", exchanged_amount, "환전될외화금액", exchange_amount, "외화통화이름", wallet_info[7])
                wallet_service.do_exchange(krw_wallet_info[0], target_cur_code, wallet_info[3], exchanged_amount, exchange_amount, wallet_info[7])
                # 출금할월렛의번호, 환전할외화코드, 월렛비밀번호, 결제할원화금액, 환전될외화금 액, 외화통화이름
                self.update_status(ae_seq, 'S')
                #print("자동환전 상태 변환", status)

    # 자동환전에 성공하면 상태 update
    def update_status(self, ae_seq, status):
        cursor = self.connection.cursor()
        sql = "UPDATE AUTO_EXCHANGE SET status = :1 WHERE AE_SEQ = :2"
        cursor.execute(sql, [status, ae_seq])
        self.connection.commit()
        cursor.close()

class ExchangeRealtime:
    def __init__(self):
        self.connection = None

    def connect_to_oracle(self):
        logging.info("Connecting to Oracle database...")
        oracledb.init_oracle_client(lib_dir=r"/home/ubuntu/instantclient_19_20")
        self.connection = oracledb.connect(user='ADMIN', password='@Pasdf658215', dsn='junha_high')
        logging.info("Connected to Oracle database")

        cursor = self.connection.cursor()
        cursor.execute("ALTER SESSION DISABLE PARALLEL DML")
        cursor.close()

    def drop_table_data(self):
        cursor = self.connection.cursor()
        sql = "DELETE FROM EXCHANGE_RATE"
        cursor.execute(sql)
        self.connection.commit()
        cursor.close()

    # 최신환율이 아닌 환율은 이동
    def move_data_to_history(self):
        cursor = self.connection.cursor()
        # 기존의 EXCHANGE_RATE 데이터를 EXCHANGE_RATE_HIST 테이블로 복사합니다.
        sql = """
        INSERT INTO EXCHANGE_RATE_HIST
        (CUR_HIST_SEQ, CURRENCY_CODE, RATE_DATE, BUY_RATE, SELL_RATE, REMITTANCE, RECEIVING, BASE_RATE, PREV_RATE, USD_CONVERSION_RATE)
        SELECT EXCHANGE_RATE_HIST_SEQ.NEXTVAL, CURRENCY_CODE, RATE_DATE, BUY_RATE, SELL_RATE, REMITTANCE, RECEIVING, BASE_RATE, PREV_RATE, USD_CONVERSION_RATE
        FROM EXCHANGE_RATE
        """
        cursor.execute(sql)
        self.connection.commit()
        cursor.close()

    def time_data_exists(self, currency_code, trade_time):
        cursor = self.connection.cursor()
        # sql = "SELECT COUNT(*) FROM EXCHANGE_RATE WHERE RATE_DATE = TO_DATE(:1, 'HH24:MI:SS')"
        sql = "SELECT COUNT(*) FROM EXCHANGE_RATE WHERE CURRENCY_CODE = :1 AND RATE_DATE = TO_DATE(:2, 'YYYY-MM-DD HH24:MI:SS')"
        count = cursor.execute(sql, [currency_code, trade_time]).fetchone()[0]
        #print("통화코드: " + currency_code + ", 통화개수는:" + str(count))
        cursor.close()
        return count > 0


    # 데일리 데이터 구축
    def initExchangeRateDaily(self):
        self.connect_to_oracle()

        logging.info("Initializing daily exchange rate...")
        today = datetime.today().date()
        #print(today)
        # 기존데이터 EXCHANGE_RATE_HIST로 이동
        self.move_data_to_history()
        # EXCHANGE_RATE 테이블의 데이터 삭제
        self.drop_table_data()
        # 셀레니움 연결
        # service_path = "/home/ubuntu/instantclient_19_8_2/chromedriver-linux64/chromedriver"
        # service_path = r"C:\Users\kopo\exchange"
        # service = Service(executable_path=service_path)
        # service = Service(service_path)
        options = webdriver.ChromeOptions()
        options.add_argument('headless') #headless 모드 설정
        # options.add_argument('--disable-dev-shm-usage')
        # options.add_argument('headless')
        # options.add_argument('no-sandbox')
        # driver = webdriver.Chrome(service=service_path, options=options)
        driver = webdriver.Chrome(options=options)

        driver.implicitly_wait(25)


        # 하나은행 환율 사이트 접속
        driver.get("https://www.kebhana.com/cms/rate/index.do?contentUrl=/cms/rate/wpfxd651_07i.do")

        time.sleep(2)

        # 검색할 날짜 입력
        a = "//*[@id='tmpInqStrDt_d']"
        elem = driver.find_element(By.XPATH, a)
        elem.clear()
        search_date = today
        elem.send_keys(search_date.strftime("%Y%m%d"))

        time.sleep(2)

        # 조회할 통화 선택
        select = Select(driver.find_element(By.ID, "curCd"))
        # codes = self.getCode()
        codes = ["USD","JPY","EUR","CNY","HKD","THB","TWD","PHP","SGD","AUD","VND","GBP","CAD","MYR","RUB"
                ,"ZAR","NOK","NZD","DKK","MXN","MNT","BHD","BDT"
                ,"BRL","BND","SAR","LKR","SEK","CHF","AED","DZD"
                ,"OMR","JOD","ILS","EGP","INR","IDR","CZK","CLP","KZT"
                ,"QAR","KES","COP","KWD","TZS","TRY","PKR","PLN","HUF"]
        # codes = ["USD","GBP"]
        print("환율조회시작")
        for code in codes:
            select.select_by_value(code)
            time.sleep(2)

            b = "//*[@id='HANA_CONTENTS_DIV']/div[2]/a"
            btn = driver.find_element(By.XPATH, b)
            btn.send_keys(Keys.ENTER)
            time.sleep(2)

            html = driver.page_source
            soup = BeautifulSoup(html, 'lxml')
            time.sleep(2)
            date = soup.select_one('#searchContentDiv > div.printdiv > p > span.fl > strong:nth-child(2)').text # 조회 날짜
            #print("날짜는: " + date)
            rows = soup.select('#searchContentDiv > div.printdiv > table > tbody > tr:nth-child(1)')
            rows.reverse()

            data_for_insertion = []

            for row in rows:
                cols = row.select('td')
                # rate_date = cols[1].text.strip()
                # rate_date = str(search_date)[:5] + "-" + str(search_date)[5:7] + "-" + str(search_date)[7:9] + " " + cols[1].text
                #print("통화코드는: " + str(code))
                rate_date = search_date.strftime('%Y-%m-%d') + " " + cols[1].text
                #print("환율 날짜: " + rate_date)
                buy_rate = float(cols[2].text.replace(",", ""))
                #print("살 때: " + str(buy_rate))
                sell_rate = float(cols[3].text.replace(",", ""))
                #print("팔 때: " + str(sell_rate))
                remittance = float(cols[4].text.replace(",", ""))
                #print("송금 보낼 때: " + str(remittance))
                receiving = float(cols[5].text.replace(",", ""))
                #print("송금 받을 때: " + str(receiving))
                base_rate = float(cols[8].text.replace(",", ""))
                #print("매매기준율: " + str(base_rate))
                # prev_rate = float(cols[9].text.replace(",", ""))
                usd_conversion_rate = float(cols[11].text.replace(",", ""))

                try :
                    img_alt = cols[9].find('img')['alt']
                    if img_alt == '증가':
                        prev_rate = cols[9].text.strip()
                    elif img_alt == '감소':
                        prev_rate = '-' + cols[9].text.strip()
                except Exception as e:
                    prev_rate = '0'

                #print("직전대비: " + str(prev_rate))
                row_data = [code, rate_date, buy_rate, sell_rate, remittance, receiving, base_rate, prev_rate, usd_conversion_rate]
                data_for_insertion.append(row_data)
            cursor = self.connection.cursor()
            for row_data in data_for_insertion:
                if not self.time_data_exists(row_data[0], row_data[1]):
                    sql = "INSERT INTO EXCHANGE_RATE(EXCHANGE_RATE_SEQ, CURRENCY_CODE, RATE_DATE, BUY_RATE, SELL_RATE, REMITTANCE, RECEIVING, BASE_RATE, PREV_RATE, USD_CONVERSION_RATE) VALUES (EXCHANGE_RATE_SEQ.NEXTVAL, :1, TO_DATE(:2, 'YYYY-MM-dd HH24:MI:SS'), :3, :4, :5, :6, :7, :8, :9)"
                    cursor.execute(sql, row_data)
                    self.connection.commit()


            cursor.close()
        driver.quit()
        logging.info("Finished initializing daily exchange rate")

        auto_exchange = AutoExchange(self.connection)
        auto_exchange.check_and_exchange()

        self.close_oracle_connection
    def close_oracle_connection(self):
        if self.connection is not None:
            self.connection.close()

def job(exchange):
    exchange.initExchangeRateDaily()
    # exchange.close_oracle_connection()

def main():
    logging.basicConfig(level=logging.INFO)
    logging.info("Starting the program...")
    exchange = ExchangeRealtime()

    schedule.every(5).minutes.do(job, exchange=exchange)
    #schedule.every(3).seconds.do(job, exchange=exchange)
    # schedule.every().day.at("03:01").do(exchange.drop_table_data)

    while True:
        schedule.run_pending()
        time.sleep(1)

main()